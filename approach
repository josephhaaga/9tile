9tile is a Python version of the Sliding Tile puzzle, a common problem in AI Algorithms research. In the interest of simplifying the game, we will consider everything from X's point of view. (X is the 'empty space' being moved around.) The goal is to get the tiles in ascending order, 1-8, with X in the bottom right corner of the board.

In the parlance of AI, 9tile is a deterministic, sequential, static, discrete problem involving a single agent. (Norvig - Types of Task Environments)

The fundamental part of an pseudo-AI approach to solving the 9-tile game will be a score function that determines pairwise distances between the current (unsolved) board and the goal state (solved) board.

At each point in the game, the pseudo-AI will use the score function to evaluate game states before and after each of the four possible moves (up,down,left,right). Whereas a greedy approach might choose the immediate best option for minimizing/maximizing the resulting score, 9tile will be constructed in anticipation of a variety of different solution approaches.

- Constructing a distance metric
	Evaluating different possible moves involves calculating how far each tile is from its final position.
	A* search is commonly applied to the sliding tile puzzle, with Manhattan Distance used as the heuristic.
	An ideal distance metric would account for vertical and horizontal distances.
		- e.g.  1,2,3           1,2,3
				4,5,6    And    7,8,4
				7,8,9           9,6,5

					results in 

			X:  0,0,0        Y: 0,0,0
			    0,0,2           1,1,0
			    2,1,1           0,1,1

	These distances iterate thru each element in the 'unsolved' matrix, reporting the distances to its final position in the 'solved' matrix.

	Since 9tile represents boards in a vector, the distance metric must use some modulus operator (or equivalent) to determine Y distance
		- We can also construct a distance metric that perceives the board as a vector, but this is not an accurate depiction of reality, especially considering we have up() and down() swapping.